using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HW2
{
    //----------------------------------------
    // Bingo 類別的基本架構，請參考並完成它！
    //----------------------------------------
    class Bingo
    {
        int side;          // 每邊幾個數字，需要是奇數。
        int selected = 0;  // 記錄已經選了多少個號碼。
        int lines = 0;     // 目前湊足的連線數。

        int[] series = null;   // 儲存合理的數字範圍: 1 ~ side*side。
        int[,] numbers = null;   // 記錄每個Cell中的數字，1 ~ side*side
        int[,] marks = null;   // 0: not selected;  1: selected.

        public Bingo(int side = 5)
        {
            this.side = side;
            reset();
        }

        // Fisher-Yates Shuffle algorithm:
        public void shuffle()
        {
            Random rand = new Random();

        }

        public void play()
        {
            reset();  // reset the values to start a new Bingo game

            bool playing = true;
            while (playing)
            {
                // DIY to complete.
            }
        }

        public bool go()
        {
            show();  // 顯示目前的Bingo表，方便使用者選擇接下來要劃記的位置與數字。

            Console.Write($"\ninput a number (1~{side * side}, or 0 to quit): ");
            string inp = Console.ReadLine();

            if (inp.Trim() == "0")
            {
                Console.WriteLine("Quit Bingo game!");
                return false;
            }

            int k = int.Parse(inp);
            if (k < 1 || side * side < k)
            {
                Console.WriteLine("數字超出範圍!");
            }
            else
            {
                markCell(k);
            }
            return true;  // true: 繼續玩; false: 結束或跳出程式。
        }

        public void markCell(int k)
        {

        }

        public void show()
        {
            // 顯示整格表格，被劃記的部分則以符號 @ 表示。

        }

        public bool chkLine(int r, int c)
        {
            
            return false;
        }


        public void reset()
        {
            selected = 0;

            if (series == null)
            {
                // 宣告 series，同時填入數值 1 ~ side*side，
                // 可以透過 shuffle 來進行互換，模擬隨機洗牌再填入Bingo表。
            }

            if (numbers == null)
            {
                // 宣告兩個二維陣列 marks 與 numbers。
                // 

            }

            shuffle();  // 將數列進行洗牌。

            int index = 0;
            for (int r = 0; r < numbers.GetLength(0); r++)
            {
                for (int c = 0; c < numbers.GetLength(1); c++)
                {
                    // 同時設定 numbers 與 marks 的值。

                }
            }
        }

    }
}
